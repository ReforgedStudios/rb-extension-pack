from __future__ import unicode_literals

import random

from django.contrib.auth.models import User
from django.utils.six.moves import range
from django.utils.translation import ugettext_lazy as _
from reviewboard.accounts.backends import AuthBackend
from reviewboard.reviews.models import Group

from rbdemo.forms import DemoAuthSettingsForm


class DemoAuthBackend(AuthBackend):
    """Authentication backend for the demo server.

    This allows people to log in with a pre-generated username and password,
    which will be shown on the login page.

    The page will try to show a username that has not already been created.
    This is generated by taking a prefix (defaults to "guest") and appending
    a random number in a range, and showing that as the username.

    The goal is to give people a clean session. Depending on the random
    numbers generated and the traffic on the server, this may not be
    feasible without too many queries, so we'll fall back on the last
    attempt.

    After creating a user for the first time, that user will be added to
    the configured review groups, in order to give them something they can
    see in their dashboard.
    """
    backend_id = 'demo'
    name = _('Demo Server')
    settings_form = DemoAuthSettingsForm

    MAX_USER_CHECKS = 10

    @property
    def login_instructions(self):
        settings = self.extension.settings
        user_prefix = settings.get('auth_user_prefix')
        max_guest_id = settings.get('auth_user_max_id')
        demo_password = settings.get('auth_password')

        # Try to find a username that hasn't been taken yet. We'll only
        # try up to a certain number of times, though.
        for i in range(self.MAX_USER_CHECKS):
            username = '%s%d' % (user_prefix, random.randint(1, max_guest_id))

            if not User.objects.filter(username=username).exists():
                break

        return (_('To log into the demo server, use username "%s", '
                  'password "%s"')
                % (username, demo_password))

    def __init__(self, *args, **kwargs):
        from rbdemo.extension import DemoExtension

        super(DemoAuthBackend, self).__init__(*args, **kwargs)
        self.extension = DemoExtension.instance

    def authenticate(self, username, password):
        settings = self.extension.settings
        user_prefix = settings.get('auth_user_prefix')
        demo_password = settings.get('auth_password')

        username = username.strip()

        if password == demo_password and username.startswith(user_prefix):
            # We know this is a guest user, and the password is valid.
            # We're going to take the ID from the end of the username,
            # make sure it's an integer in the expected range, and then
            # validate.
            guest_id = username[len(user_prefix):]

            try:
                # Check that the ID is in the allowed range.
                if 0 < int(guest_id) <= settings.get('auth_user_max_id'):
                    return self.get_or_create_user(username, None, password)
            except ValueError:
                pass

        return None

    def get_or_create_user(self, username, request, password=None):
        user, is_new = User.objects.get_or_create(username=username)

        if is_new:
            user.set_unusable_password()
            user.save()

            group_names = self.extension.settings.get('auth_default_groups')

            # Add the user to the default groups, so that they can see some
            # review requests on their dashboard.
            for group_name in group_names:
                groups = Group.objects.get(name=group_name)
                groups.users.add(user)

        return user
